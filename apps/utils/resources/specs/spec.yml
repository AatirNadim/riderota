openapi: 3.0.3
info:
  title: rideRota API
  version: 1.0.0
tags:
  - name: Authentication
    description: Operations for user authentication and session management.
  - name: User Management
    description: Operations for creating different types of users.

paths:
  /api/auth/signup/superadmin:
    post:
      summary: Superadmin and Tenant Signup
      tags: [Authentication & Onboarding]
      description: >
        Creates a new superadmin user and their associated tenant.
        On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
      requestBody:
        description: Superadmin and new tenant details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuperadminCreatePayload"
      responses:
        "201":
          description: >
            User and tenant created successfully.
            Tokens are returned in HttpOnly cookies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Bad Request / Validation Error
        "409":
          description: Conflict - A user or tenant with these details already exists.

  /api/auth/signup/admin:
    post:
      summary: Admin Signup
      tags: [Authentication & Onboarding]
      description: >
        Creates a new admin user.
        On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
      requestBody:
        description: Admin user details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminCreatePayload"
      responses:
        "201":
          description: >
            User created successfully.
            Tokens are returned in HttpOnly cookies.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "accessToken=...; HttpOnly; Secure; Path=/; Max-Age=900"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Bad Request / Validation Error
        "409":
          description: Conflict - A user with these details already exists.

  /api/auth/signup/driver:
    post:
      summary: Driver Signup
      tags: [Authentication & Onboarding]
      description: >
        Creates a new driver user.
        On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
      requestBody:
        description: Driver user details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DriverCreatePayload"
      responses:
        "201":
          description: >
            User created successfully.
            Tokens are returned in HttpOnly cookies.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "accessToken=...; HttpOnly; Secure; Path=/; Max-Age=900"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Bad Request / Validation Error
        "409":
          description: Conflict - A user with these details already exists.

  /api/auth/signup/employee:
    post:
      summary: Employee Signup
      tags: [Authentication & Onboarding]
      description: >
        Creates a new employee user.
        On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
      requestBody:
        description: Employee user details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeCreatePayload"
      responses:
        "201":
          description: >
            User created successfully.
            Tokens are returned in HttpOnly cookies.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "accessToken=...; HttpOnly; Secure; Path=/; Max-Age=900"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Bad Request / Validation Error
        "409":
          description: Conflict - A user with these details already exists.

  /api/auth/whoami:
    get:
      summary: Get Current User Details
      tags: [Authentication]
      description: >
        Retrieves the details of the currently authenticated user based on the session
        token provided in the request cookies.
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdministrationDetails"
        "401":
          description: Unauthorized - The user is not authenticated or the session has expired.
  # You would have a similar login endpoint
  /api/auth/login/administration:
    post:
      summary: User Login
      tags: [Authentication & Onboarding]
      description: >
        Authenticates a user. On success, returns access and refresh
        tokens via HttpOnly Set-Cookie headers.
      requestBody:
        description: User credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginPayload"
      responses:
        "200":
          description: Login successful. Tokens are returned in HttpOnly cookies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
        "401":
          description: Unauthorized - Invalid email or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password."

  /api/auth/login/driver:
    post:
      summary: Driver Login
      tags: [Authentication & Onboarding]
      description: >
        Authenticates a driver user. On success, returns access and refresh
        tokens via HttpOnly Set-Cookie headers.
      requestBody:
        description: Employee credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginPayload"
      responses:
        "200":
          description: Login successful. Tokens are returned in HttpOnly cookies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DriverDetails"
        "401":
          description: Unauthorized - Invalid email or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password."

  /api/auth/login/employee:
    post:
      summary: Employee Login
      tags: [Authentication & Onboarding]
      description: >
        Authenticates an employee user. On success, returns access and refresh
        tokens via HttpOnly Set-Cookie headers.
      requestBody:
        description: Employee credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginPayload"
      responses:
        "200":
          description: Login successful. Tokens are returned in HttpOnly cookies.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeDetails"
        "401":
          description: Unauthorized - Invalid email or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password."

  /api/invite:
    post:
      summary: Invite a new User
      tags: [User Management]
      requestBody:
        description: User email and type
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInvitePayload"
      responses:
        "201":
          $ref: "#/components/schemas/GenericSuccessResponse"
        "400":
          description: Bad Request / Validation Error

  /api/auth/clearSession:
    post:
      summary: Clear User Session
      tags: [Authentication]
      description: >
        Logs the user out by clearing the access and refresh token cookies.
      responses:
        "200":
          description: >
            Session cleared successfully. The authentication cookies have been invalidated.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "accessToken=; HttpOnly; Secure; Path=/; Max-Age=0"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session cleared successfully."
        "500":
          description: >
            An error occurred while clearing the session.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to clear session."

  /api/tenant/create:
    post:
      tags:
        - Tenant Management
      summary: Create a new tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantCreatePayload"
      responses:
        "201":
          description: Tenant created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantDetails"
        "400":
          description: Bad request, validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."

  /api/tenant/slug/check-if-exists:
    get:
      summary: Check if a tenant slug exists
      tags: [Tenant Management]
      parameters:
        - in: query
          name: slug
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Endpoint ran successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    example: true
        "404":
          description: Error checking for slug
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error checking for slug."

  /api/admin/task/createRideTask:
    post:
      summary: Create a new ride task
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RideTaskCreatePayload"
      responses:
        "201":
          description: Ride task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RideTaskDetails"
        "400":
          description: Bad request, validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."

  /api/driver/task/generateRideStartOtp:
    get:
      summary: Send OTP to start a ride
      tags: [Driver]
      parameters:
        - in: query
          name: rideTaskId
          required: true
          schema:
            type: string
            example: "ride_task_123"
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP sent successfully."
        "400":
          description: Bad request, validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."

  /api/driver/task/getRideTasks:
    get:
      summary: Get ride tasks for the driver
      tags: [Driver]
      parameters:
        - name: driverId
          in: query
          required: true
          description: "The unique identifier for the driver."
          schema:
            type: string
            example: "driver_123"
      responses:
        "200":
          description: Ride tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RideTaskForDriver"
        "404":
          description: No ride tasks found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No ride tasks found."

  /api/driver/task/generateRideEndOtp:
    post:
      summary: Generate OTP to end a ride; requires driver authentication.
      tags: [Driver]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rideTaskId:
                  type: string
                  description: "The unique identifier for the ride task."
                  example: "ride_task_123"
      responses:
        "200":
          description: OTP generated and sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP generated and sent successfully."
        "400":
          description: Bad request, validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred."

  /api/auth/users/invite:
    post:
      summary: Invite a new user to the platform
      tags: [User Management]
      requestBody:
        description: User email and type
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInvitePayload"
      responses:
        "201":
          description: User entry created and invitation sent successfully
        "400":
          description: Bad Request / Validation Error
        "409":
          description: Conflict - A user with these details already exists.

  /api/users/validate-invite:
    get:
      summary: Validate an invitation token
      tags: [User Management]
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Invitation token is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateInviteResponse"
        "400":
          description: Invalid or expired invite token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateInviteResponse"
        "404":
          description: Invite not found for the given token

  /api/auth/users/onboard:
    post:
      summary: Onboard a user from an invitation
      tags: [User Management]
      requestBody:
        description: User details for onboarding
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/AdminCreatePayload"
                - $ref: "#/components/schemas/DriverCreatePayload"
                - $ref: "#/components/schemas/EmployeeCreatePayload"

      responses:
        "201":
          description: User onboarded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User onboarded successfully."
        "400":
          description: Bad Request / Validation Error
        "409":
          description: Conflict - A user with these details already exists.

components:
  schemas:
    UserInvitePayload:
      type: object
      properties:
        role:
          type: string
          enum: [SUPERADMIN, ADMIN, DRIVER, EMPLOYEE]
          description: "The type of user to invite."
          example: "EMPLOYEE"
        email:
          type: string
          format: email
          example: "admin@example.com"
        tenantSlug:
          type: string
          description: "The slug of the tenant the user will belong to."
          example: "innovate-inc"
        welcomeMessage:
          type: string
          description: "An optional welcome message to include in the invitation email."
          example: "Welcome to our platform! We're excited to have you on board."
      required:
        - email
        - role
        - tenantSlug

    ValidateInviteResponse:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        role:
          type: string
          enum: [SUPERADMIN, ADMIN, DRIVER, EMPLOYEE]
          description: "The type of user invited."
          example: "EMPLOYEE"
        tenantSlug:
          type: string
          description: "The slug of the tenant the user will belong to."
          example: "innovate-inc"
        expired:
          type: boolean
          description: "Indicates if the invite token has expired."
          example: false
      required:
        - email
        - role
        - tenantSlug
        - expired

    # --- Base Types ---
    UserBase:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        age:
          type: integer
          example: 30
        phoneNo:
          type: string
          example: "+11234567890"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        profileImgUrl:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/profile.jpg"
        role:
          type: string
          enum: [SUPERADMIN, ADMIN, DRIVER, EMPLOYEE]
          description: "The type of user."
          example: "EMPLOYEE"
        tenantSlug:
          type: string
          description: "The slug of the tenant the user will belong to."
          example: "innovate-inc"
      required:
        - name
        - phoneNo
        - email
        - role
        - tenantSlug

    UserCreatePayload:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            password:
              type: string
              description: "The user's regular password."
              example: "$2b$10$K2.09uI5GU.J4sF2uB5gIuJ0Z5jJ6X3Y2Z5jJ6X3Y2Z5jJ6X3Y2Z"
          required:
            - password

    LoginPayload:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    ApiResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    # --- User Payloads & Responses ---
    SuperadminCreatePayload:
      allOf:
        - $ref: "#/components/schemas/UserCreatePayload"

    AdminCreatePayload:
      allOf:
        - $ref: "#/components/schemas/UserCreatePayload"

    EmployeeCreatePayload:
      allOf:
        - $ref: "#/components/schemas/UserCreatePayload"
        - type: object
          properties:
            address:
              $ref: "#/components/schemas/AddressDetails"
          required:
            - address

    DriverCreatePayload:
      allOf:
        - $ref: "#/components/schemas/UserCreatePayload"
        - type: object
          properties:
            vehicleDetails:
              $ref: "#/components/schemas/VehicleDetails"
          required:
            - vehicleDetails

    EmployeeDetails:
      allOf:
        - $ref: "#/components/schemas/UserDetails"
        - type: object
          properties:
            address:
              $ref: "#/components/schemas/AddressDetails"
          required:
            - address

    VehicleDetails:
      type: object
      properties:
        make:
          type: string
          example: "Toyota"
        model:
          type: string
          example: "Camry"
        color:
          type: string
          example: "Blue"
        licensePlate:
          type: string
          example: "RIDE-123"
        capacity:
          type: integer
          example: 4
      required:
        - make
        - model
        - color
        - licensePlate
        - capacity

    UserDetails:
      type: object
      description: "Public details of a user."
      properties:
        id:
          type: string
          description: "The user's unique identifier."
          example: "clxjq1z0a0000e8b4c2g7h6k9"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        name:
          type: string
          example: "John Doe"
        age:
          type: integer
          nullable: true
          example: 30
        phoneNo:
          type: string
          example: "+11234567890"
        profileImgUrl:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/profile.jpg"
        role:
          type: string
          enum: [SUPERADMIN, ADMIN, DRIVER, EMPLOYEE]
          example: "EMPLOYEE"
        tenantName:
          type: string
          description: "The name of the tenant the user belongs to."
          example: "Innovate Inc."
      required:
        - id
        - email
        - name
        - phoneNo
        - role
        - tenantName


    DriverDetails:
      allOf:
        - $ref: "#/components/schemas/UserDetails"
        - type: object
          properties:
            vehicleDetails:
              $ref: "#/components/schemas/VehicleDetails"
          required:
            - vehicleDetails

    AddressDetails:
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        zipCode:
          type: string
        landMark:
          type: string
      required:
        - addressLine1
        - city
        - zipCode

    GenericSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Authentication successful."

    TenantCreatePayload:
      type: object
      properties:
        name:
          type: string
          description: "The name of the new tenant."
          example: "Innovate Inc."
        slug:
          type: string
          description: "A unique identifier for the tenant."
          example: "innovate-inc"
        office_name:
          type: string
          description: "The name of the office associated with the tenant."
          example: "Innovate HQ"
        office_location:
          type: string
          description: "The location of the office associated with the tenant."
          example: "123 Innovation Drive, Tech City"
      required:
        - name
        - office_name
        - office_location
        - slug

    TenantDetails:
      allOf:
        - $ref: "#/components/schemas/TenantCreatePayload"
        - type: object
          properties:
            id:
              type: string
              description: "The unique identifier for the tenant."
              example: "tenant_123"
            createdAt:
              type: string
              format: date-time
              description: "The date and time when the tenant was created."
              example: "2023-01-01T12:00:00Z"
            superAdminId:
              type: string
              description: "The unique identifier for the super admin user."
              example: "user_456"

    AdministrationDetails:
      type: object
      description: "Public details of a user involved in the administration"
      properties:
        userDetails:
          $ref: "#/components/schemas/UserDetails"
        tenantDetails:
          $ref: "#/components/schemas/TenantDetails"

    RideTaskCreatePayload:
      type: object
      properties:
        driverId:
          type: string
          description: "The unique identifier for the driver."
        passengerId:
          type: string
          description: "The unique identifier for the passenger."
        rideStartOtpHash:
          type: string
          description: "The OTP hash for starting the ride."
          example: "otp_hash_start"
        rideEndOtpHash:
          type: string
          description: "The OTP hash for ending the ride."
          example: "otp_hash_end"
        rideExpires:
          type: string
          format: date-time
          description: "The expiration time for the ride."
          example: "2023-01-01T12:00:00Z"
        from:
          type: string
          description: "The starting location for the ride."
          example: "123 Main St, Anytown, USA"
        to:
          type: string
          description: "The destination location for the ride."
          example: "456 Elm St, Othertown, USA"

    RideTaskDetails:
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier for the ride task."

    RideTaskForDriver:
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier for the ride task."
          example: "ride_task_123"
        passengerName:
          type: string
          description: "The name of the passenger."
          example: "John Doe"
        rideExpires:
          type: string
          format: date-time
          description: "The expiration time for the ride."
          example: "2023-01-01T12:00:00Z"
        from:
          type: string
          description: "The starting location for the ride."
          example: "123 Main St, Anytown, USA"
        to:
          type: string
          description: "The destination location for the ride."
          example: "456 Elm St, Othertown, USA"

  responses:
    AuthSuccessResponse:
      description: |-
        Request successful. An httpOnly cookie containing an access token and another httpOnly cookie containing a refresh token have been set.
      headers:
        Set-Cookie:
          schema:
            type: string
            example: "accessToken=...; HttpOnly; Path=/; SameSite=Strict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
            example:
              message: "Authentication successful"
