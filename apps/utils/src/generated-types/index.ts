/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/signup/superadmin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Superadmin and Tenant Signup
         * @description Creates a new superadmin user and their associated tenant. On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Superadmin and new tenant details. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SuperadminCreatePayload"];
                };
            };
            responses: {
                /** @description User and tenant created successfully. Tokens are returned in HttpOnly cookies.
                 *      */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GenericSuccessResponse"];
                    };
                };
                /** @description Bad Request / Validation Error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Conflict - A user or tenant with these details already exists. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Admin Signup
         * @description Creates a new admin user. On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Admin user details. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AdminCreatePayload"];
                };
            };
            responses: {
                /** @description User created successfully. Tokens are returned in HttpOnly cookies.
                 *      */
                201: {
                    headers: {
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GenericSuccessResponse"];
                    };
                };
                /** @description Bad Request / Validation Error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Conflict - A user with these details already exists. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup/driver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Driver Signup
         * @description Creates a new driver user. On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Driver user details. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DriverCreatePayload"];
                };
            };
            responses: {
                /** @description User created successfully. Tokens are returned in HttpOnly cookies.
                 *      */
                201: {
                    headers: {
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GenericSuccessResponse"];
                    };
                };
                /** @description Bad Request / Validation Error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Conflict - A user with these details already exists. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup/employee": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Employee Signup
         * @description Creates a new employee user. On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Employee user details. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EmployeeCreatePayload"];
                };
            };
            responses: {
                /** @description User created successfully. Tokens are returned in HttpOnly cookies.
                 *      */
                201: {
                    headers: {
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GenericSuccessResponse"];
                    };
                };
                /** @description Bad Request / Validation Error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Conflict - A user with these details already exists. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Details
         * @description Retrieves the details of the currently authenticated user based on the session token provided in the request cookies.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User details retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdministrationDetails"];
                    };
                };
                /** @description Unauthorized - The user is not authenticated or the session has expired. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login/administration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User Login
         * @description Authenticates a user. On success, returns access and refresh tokens via HttpOnly Set-Cookie headers.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User credentials for login */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginPayload"];
                };
            };
            responses: {
                /** @description Login successful. Tokens are returned in HttpOnly cookies. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDetails"];
                    };
                };
                /** @description Unauthorized - Invalid email or password. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid email or password. */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invite a new User */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User email and type */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserInvitePayload"];
                };
            };
            responses: {
                201: components["schemas"]["GenericSuccessResponse"];
                /** @description Bad Request / Validation Error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/clearSession": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clear User Session
         * @description Logs the user out by clearing the access and refresh token cookies.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Session cleared successfully. The authentication cookies have been invalidated.
                 *      */
                200: {
                    headers: {
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Session cleared successfully. */
                            message?: string;
                        };
                    };
                };
                /** @description An error occurred while clearing the session.
                 *      */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Failed to clear session. */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenant/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new tenant */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TenantCreatePayload"];
                };
            };
            responses: {
                /** @description Tenant created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TenantDetails"];
                    };
                };
                /** @description Bad request, validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid input data */
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example An unexpected error occurred. */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenant/slug/check-if-exists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if a tenant slug exists */
        get: {
            parameters: {
                query: {
                    slug: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Endpoint ran successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example true */
                            exists?: boolean;
                        };
                    };
                };
                /** @description Error checking for slug */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Error checking for slug. */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/task/createRideTask": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new ride task */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RideTaskCreatePayload"];
                };
            };
            responses: {
                /** @description Ride task created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RideTaskDetails"];
                    };
                };
                /** @description Bad request, validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid input data */
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example An unexpected error occurred. */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/driver/task/generateRideStartOtp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Send OTP to start a ride */
        get: {
            parameters: {
                query: {
                    rideTaskId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OTP sent successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example OTP sent successfully. */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request, validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid input data */
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example An unexpected error occurred. */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/driver/task/getRideTasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ride tasks for the driver */
        get: {
            parameters: {
                query: {
                    /** @description The unique identifier for the driver. */
                    driverId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ride tasks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RideTaskForDriver"][];
                    };
                };
                /** @description No ride tasks found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example No ride tasks found. */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/driver/task/generateRideEndOtp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate OTP to end a ride; requires driver authentication. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The unique identifier for the ride task.
                         * @example ride_task_123
                         */
                        rideTaskId?: string;
                    };
                };
            };
            responses: {
                /** @description OTP generated and sent successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example OTP generated and sent successfully. */
                            message?: string;
                        };
                    };
                };
                /** @description Bad request, validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid input data */
                            message?: string;
                        };
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example An unexpected error occurred. */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/users/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invite a new user to the platform */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User email and type */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserInvitePayload"];
                };
            };
            responses: {
                /** @description User entry created and invitation sent successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request / Validation Error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Conflict - A user with these details already exists. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/validate-invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate an invitation token */
        get: {
            parameters: {
                query: {
                    token: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Invitation token is valid */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidateInviteResponse"];
                    };
                };
                /** @description Invalid or expired invite token */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidateInviteResponse"];
                    };
                };
                /** @description Invite not found for the given token */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserInvitePayload: {
            /**
             * @description The type of user to invite.
             * @example EMPLOYEE
             * @enum {string}
             */
            userType: "SUPERADMIN" | "ADMIN" | "DRIVER" | "EMPLOYEE";
            /**
             * Format: email
             * @example admin@example.com
             */
            email: string;
            /**
             * @description The slug of the tenant the user will belong to.
             * @example innovate-inc
             */
            tenantSlug: string;
            /**
             * @description An optional welcome message to include in the invitation email.
             * @example Welcome to our platform! We're excited to have you on board.
             */
            welcomeMessage?: string;
        };
        ValidateInviteResponse: {
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /**
             * @description The type of user invited.
             * @example EMPLOYEE
             * @enum {string}
             */
            userType: "SUPERADMIN" | "ADMIN" | "DRIVER" | "EMPLOYEE";
            /**
             * @description The slug of the tenant the user will belong to.
             * @example innovate-inc
             */
            tenantSlug: string;
            /**
             * @description Indicates if the invite token has expired.
             * @example false
             */
            expired: boolean;
        };
        UserBase: {
            /** @example John Doe */
            name: string;
            /** @example 30 */
            age?: number;
            /** @example +11234567890 */
            phoneNo: string;
            /**
             * Format: email
             * @example john.doe@example.com
             */
            email: string;
            /**
             * Format: uri
             * @example https://example.com/profile.jpg
             */
            profileImgUrl?: string | null;
        };
        UserCreatePayload: components["schemas"]["UserBase"] & {
            /**
             * @description The user's regular password.
             * @example $2b$10$K2.09uI5GU.J4sF2uB5gIuJ0Z5jJ6X3Y2Z5jJ6X3Y2Z5jJ6X3Y2Z
             */
            password: string;
        };
        LoginPayload: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        ApiResponse: {
            message: string;
        };
        SuperadminCreatePayload: components["schemas"]["UserCreatePayload"];
        AdminCreatePayload: components["schemas"]["UserCreatePayload"];
        EmployeeCreatePayload: components["schemas"]["UserCreatePayload"] & {
            /**
             * @description The employee's home address or pickup location.
             * @example 123 Main St, Anytown, USA
             */
            location: string;
        };
        DriverCreatePayload: components["schemas"]["UserCreatePayload"] & {
            /** @example Toyota */
            carMake: string;
            /** @example Camry */
            carName: string;
            /** @example Blue */
            carColor: string;
            /** @example RIDE-123 */
            carPlate: string;
            /** @example 4 */
            numberOfSeats: number;
            carDescription?: string | null;
        };
        /** @description Public details of a user. */
        UserDetails: {
            /**
             * @description The user's unique identifier.
             * @example clxjq1z0a0000e8b4c2g7h6k9
             */
            id?: string;
            /**
             * Format: email
             * @example john.doe@example.com
             */
            email?: string;
            /** @example John Doe */
            name?: string;
            /** @example 30 */
            age?: number | null;
            /** @example +11234567890 */
            phoneNo?: string;
            /**
             * Format: uri
             * @example https://example.com/profile.jpg
             */
            profileImgUrl?: string | null;
            /**
             * @example EMPLOYEE
             * @enum {string}
             */
            role?: "SUPERADMIN" | "ADMIN" | "DRIVER" | "EMPLOYEE";
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status?: "PENDING" | "MEMBER";
            /**
             * @description The slug of the tenant the user belongs to.
             * @example innovate-inc
             */
            tenantSlug?: string | null;
        };
        GenericSuccessResponse: {
            /** @example Authentication successful. */
            message?: string;
        };
        TenantCreatePayload: {
            /**
             * @description The name of the new tenant.
             * @example Innovate Inc.
             */
            name: string;
            /**
             * @description A unique identifier for the tenant.
             * @example innovate-inc
             */
            slug: string;
            /**
             * @description The name of the office associated with the tenant.
             * @example Innovate HQ
             */
            office_name: string;
            /**
             * @description The location of the office associated with the tenant.
             * @example 123 Innovation Drive, Tech City
             */
            office_location: string;
        };
        TenantDetails: components["schemas"]["TenantCreatePayload"] & {
            /**
             * @description The unique identifier for the tenant.
             * @example tenant_123
             */
            id?: string;
            /**
             * Format: date-time
             * @description The date and time when the tenant was created.
             * @example 2023-01-01T12:00:00Z
             */
            createdAt?: string;
            /**
             * @description The unique identifier for the super admin user.
             * @example user_456
             */
            superAdminId?: string;
        };
        /** @description Public details of a user involved in the administration */
        AdministrationDetails: {
            userDetails?: components["schemas"]["UserDetails"];
            tenantDetails?: components["schemas"]["TenantDetails"];
        };
        RideTaskCreatePayload: {
            /** @description The unique identifier for the driver. */
            driverId?: string;
            /** @description The unique identifier for the passenger. */
            passengerId?: string;
            /**
             * @description The OTP hash for starting the ride.
             * @example otp_hash_start
             */
            rideStartOtpHash?: string;
            /**
             * @description The OTP hash for ending the ride.
             * @example otp_hash_end
             */
            rideEndOtpHash?: string;
            /**
             * Format: date-time
             * @description The expiration time for the ride.
             * @example 2023-01-01T12:00:00Z
             */
            rideExpires?: string;
            /**
             * @description The starting location for the ride.
             * @example 123 Main St, Anytown, USA
             */
            from?: string;
            /**
             * @description The destination location for the ride.
             * @example 456 Elm St, Othertown, USA
             */
            to?: string;
        };
        RideTaskDetails: {
            /** @description The unique identifier for the ride task. */
            id?: string;
        };
        RideTaskForDriver: {
            /**
             * @description The unique identifier for the ride task.
             * @example ride_task_123
             */
            id?: string;
            /**
             * @description The name of the passenger.
             * @example John Doe
             */
            passengerName?: string;
            /**
             * Format: date-time
             * @description The expiration time for the ride.
             * @example 2023-01-01T12:00:00Z
             */
            rideExpires?: string;
            /**
             * @description The starting location for the ride.
             * @example 123 Main St, Anytown, USA
             */
            from?: string;
            /**
             * @description The destination location for the ride.
             * @example 456 Elm St, Othertown, USA
             */
            to?: string;
        };
    };
    responses: {
        /** @description Request successful. An httpOnly cookie containing an access token and another httpOnly cookie containing a refresh token have been set. */
        AuthSuccessResponse: {
            headers: {
                "Set-Cookie"?: string;
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ApiResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
